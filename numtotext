from concurrent.futures import ThreadPoolExecutor

input_cols =  [c for c in joined.columns if c.startswith("input_")]
other_cols =  [c for c in joined.columns if c not in input_cols]

def wrapper(row):
    input_vals  = [row[c] for c in input_cols]
    other_vals  = [row[c] for c in other_cols]
    process_input_row(input_vals, other_vals)

# toLocalIterator() brings rows partition‑by‑partition, so memory stays flat
row_iter = joined.select(*input_cols, *other_cols).toLocalIterator()

with ThreadPoolExecutor(max_workers=8) as pool:   # pick a thread count for your workload
    pool.map(wrapper, row_iter)
